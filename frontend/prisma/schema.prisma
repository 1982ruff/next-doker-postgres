generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                String              @id @default(cuid())
  email             String              @unique
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  emailVerified     DateTime?
  image             String?
  isAdmin           Boolean             @default(false)
  name              String?
  Account           Account[]
  Order             Order[]
  sessions          Session[]
  VerificationToken VerificationToken[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  token      String   @unique
  expires    DateTime
  identifier String
  userId     String?
  User       User?    @relation(fields: [userId], references: [id])

  @@unique([identifier, token])
}

model Category {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  title     String
  desc      String
  color     String
  img       String
  slug      String    @unique
  products  Product[]
}

model Product {
  id          String   @id @default(cuid())
  title       String
  description String?
  slug        String   @unique
  category    Category @relation(fields: [catSlug], references: [slug])
  tags        String?
  shipping    String?
  image       String?
  price       Decimal
  priceOld    Decimal
  isFeatured  Boolean  @default(false)
  isNew       Boolean  @default(false)
  options     Json[]
  catSlug     String
  createdAt   DateTime @default(now())
}

model Order {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  price     Decimal
  products  Json[]
  status    String
  intent_id String?  @unique
  userEmail String
  user      User     @relation(fields: [userEmail], references: [email])
}

model Promo {
  id          String  @id @default(cuid())
  title       String
  description String  @default("")
  slug        String
  image       String?
}

model Slides {
  id    String  @id @default(cuid())
  title String
  slug  String
  image String?
}

model Brands {
  id    String @id @default(cuid())
  title String
  slug  String @unique
  logo  String
}

model Blogs {
  id          String @id @default(cuid())
  title       String
  description String
  link        String
  image       String
}

model Team {
  id          String @id @default(cuid())
  name        String
  description String
  link        String
  image       String
}

model Testimonial {
  id           String @id @default(cuid())
  title        String
  description  String
  name         String
  whoInCompany String
  image        String
}

model FullBlog {
  id          String @id @default(cuid())
  title       String
  description String
  link        String
  category    String
  name        String
  likes       String
  comments    String
  date        String
  image       String
}
